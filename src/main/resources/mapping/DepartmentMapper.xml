<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.DepartmentMapper">
    <!-- 引用缓存：namespace：指定和哪个名称空间下的缓存一样 -->
    <cache-ref namespace="com.atguigu.mybatis.dao.EmployeeMapper"></cache-ref>

    <select id="getDeptById" resultType="com.atguigu.mybatis.beans.Department">
        select id,dept_name departmentName from tbl_dept where id = #{id}
    </select>

    <!--
        collection嵌套结果集的方式，定义关联的集合类型元素封装规则
    -->
    <resultMap id="MyDept" type="com.atguigu.mybatis.beans.Department">
        <id column="did" property="id"/>
        <result column="dept_name" property="departmentName"/>
        <!--
            collection定义关联集合类型的属性的封装规则
            ofType：指定集合里面元素的类型
         -->
        <collection property="emps" ofType="com.atguigu.mybatis.beans.Employee">
            <!-- 定义这个集合中元素的封装规则 -->
            <id column="eid" property="id"/>
            <result column="last_name" property="lastName"/>
            <result column="email" property="email"/>
            <result column="gender" property="gender"/>
        </collection>
    </resultMap>
    <select id="getDeptByIdPlus" resultMap="MyDept">
        select d.id did,d.dept_name dept_name,e.id eid,e.last_name lastname,e.email email,e.gender gender
        from tbl_dept d left join tbl_employee e on d.id = e.d_id where d.id = #{id}
    </select>

    <!-- collection：分段查询 -->
    <resultMap id="MyDept2" type="com.atguigu.mybatis.beans.Department">
        <id column="id" property="id"/>
        <result column="dept_name" property="departmentName"/>

        <collection property="emps" select="com.atguigu.mybatis.dao.EmployeeMapperPlus.getEmpsByDeptId" column="id"
            fetchType="lazy"></collection>
    </resultMap>
    <select id="getDeptByIdStep" resultMap="MyDept2">
        select id,dept_name departmentName from tbl_dept where id = #{id}
    </select>

    <!--
        扩展：多列的值传递过去：
        将多列的值封装map传递;
        column="{key1=column1,key2=column2}"
        fetchType：默认为lazy，表示使用延迟加载
                   eager：立即
     -->

</mapper>