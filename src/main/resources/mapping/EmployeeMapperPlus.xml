<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.dao.EmployeeMapperPlus">

    <!--
        自定义某个javaBean的封装规则
        type：自定义规则的java类型
        id：方便引用
    -->
    <resultMap id="MyEmp" type="com.atguigu.mybatis.beans.Employee">
        <!--
            指定主键列的封装规则
            id定义主键会底层有优化
            column：指定哪一列
            property：指定对应的javaBean属性
        -->
        <id column="id" property="id"/>
        <!-- 定义普通列封装规则 -->
        <result column="last_name" property="lastName"/>
        <!-- 其它不指定的列会自动封装：我们只要写resultMap，就把全部的映射规则都写上 -->
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
    </resultMap>

    <!-- resultMap：自定义结果集映射规则 -->
    <select id="getEmpById" resultMap="MyEmp">
        select * from tbl_employee where id = #{id}
    </select>

    <!--
        场景一：
            查询Employee的同时查询其所在的部门
            Employe===Department
            一个员工有与之对应的部门信息
    -->
    <!--
        联合查询：级联属性封装结果集
    -->
    <resultMap id="MyEmpPlus" type="com.atguigu.mybatis.beans.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>
        <result column="did" property="dept.id"/>
        <result column="dept_name" property="dept.departmentName"/>
    </resultMap>

    <!--
        使用association定义关联单个对象的封装规则
    -->
    <resultMap id="MyEmpPlus2" type="com.atguigu.mybatis.beans.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="gender" property="gender"/>

        <!--
            association可以指定联合的javaBean对象
            property:指定那个属性是联合的对象
            javaType：这个属性对象的类型【不能省略】
        -->
        <association property="dept" javaType="com.atguigu.mybatis.beans.Department">
            <id column="did" property="id"/>
            <result column="dept_name" property="departmentName"/>
        </association>
    </resultMap>
    <select id="getEmpAndDept" resultMap="MyEmpPlus2">
        select e.id id,e.last_name last_Name,e.gender gender,e.d_id d_id,d.id did,d.dept_name dept_name  from
        tbl_employee e,tbl_dept d where e.d_id = d.id and e.id = #{id}
    </select>

    <!--
        使用association进行分布查询
        1.先按照员工id查询员工信息
        2.根据查询员工信息中的d_id值去部门表查出部门信息
        3.部门设置到员工中
    -->
    <resultMap id="MyEmpByStep" type="com.atguigu.mybatis.beans.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>
        <!--
            association定义关联对象的封装规则
            select：表明当前属性是调用select指定的方法查出的结果
            column：指定将哪一列的值传给这个方法

            流程：使用select指定的方法（传入column指定的这列参数的值）查出对象，并封装给property指定的属性
        -->
        <association property="dept" select="com.atguigu.mybatis.dao.DepartmentMapper.getDeptById" column="d_id"></association>
    </resultMap>
    <select id="getEmpByIdStep" resultMap="MyEmpDis">
        select * from tbl_employee where id = #{id}
    </select>

    <!--
        可以使用延迟加载（懒加载）；（按需加载）
        Employee ===> Department
        我们每次查询Employee对象的时候，都将部门信息一起查询出来
        部门信息在我们使用的时候再去查询
        分段查询的基础之上加上两个配置
    -->
    <!-- ====================== association ======================================== -->

    <!--
        场景二：查询部门的时候将部门对应的所有员工信息也查询查来：注释在DepartmentMapper.xml中
    -->

    <select id="getEmpsByDeptId" resultType="com.atguigu.mybatis.beans.Employee">
        select * from tbl_employee where d_id = #{deptId}
    </select>



    <!--
        鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
        封装Employee：
            如果查出的是女生：就把部门信息查询出来，否则不查询
            如果是男生，把last_name这一列的值赋值给email
    -->
    <resultMap id="MyEmpDis" type="com.atguigu.mybatis.beans.Employee">
        <id column="id" property="id"/>
        <result column="last_name" property="lastName"/>
        <result column="email" property="email"/>
        <result column="gender" property="gender"/>

        <!--
            column：指定判定的列名
            javaType：列值对应的java类型
        -->
        <discriminator javaType="String" column="gender">
            <!-- 女生 resultType：指定封装的结果类型,不能缺少。resultMap -->
            <case value="0" resultType="com.atguigu.mybatis.beans.Employee">
                <association property="dept" select="com.atguigu.mybatis.dao.DepartmentMapper.getDeptById"
                             column="d_id"></association>
            </case>
            <!-- 男生 -->
            <case value="1" resultType="com.atguigu.mybatis.beans.Employee">
                <id column="id" property="id"/>
                <result column="last_name" property="lastName"/>
                <result column="last_name" property="email"/>
                <result column="gender" property="gender"/>
            </case>
        </discriminator>
    </resultMap>
</mapper>